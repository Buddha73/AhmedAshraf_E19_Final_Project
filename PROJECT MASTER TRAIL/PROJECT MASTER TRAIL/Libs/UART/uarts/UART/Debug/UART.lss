
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000018e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  0000018e  00000202  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007df  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000680  00000000  00000000  00000aa7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029a  00000000  00000000  00001127  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  000013c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000342  00000000  00000000  00001454  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000188  00000000  00000000  00001796  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  0000191e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e8       	ldi	r30, 0x8E	; 142
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 7b 00 	call	0xf6	; 0xf6 <main>
  7a:	0c 94 c5 00 	jmp	0x18a	; 0x18a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <UART_init>:
	}
}
//VOID
void UART_init()
{
	UCSRB |=(1<<TXEN) |(1<<RXEN);
  82:	8a b1       	in	r24, 0x0a	; 10
  84:	88 61       	ori	r24, 0x18	; 24
  86:	8a b9       	out	0x0a, r24	; 10
	UBRRL =103;
  88:	87 e6       	ldi	r24, 0x67	; 103
  8a:	89 b9       	out	0x09, r24	; 9
  8c:	08 95       	ret

0000008e <UART_Send_Char>:
}
void UART_Send_Char(char data)
{
	//pooling........
	while(!(UCSRA &(1<<UDRE)));
  8e:	5d 9b       	sbis	0x0b, 5	; 11
  90:	fe cf       	rjmp	.-4      	; 0x8e <UART_Send_Char>
	UDR =data;
  92:	8c b9       	out	0x0c, r24	; 12
  94:	08 95       	ret

00000096 <UART_Send_STR>:
}
void UART_Send_STR(char* str)
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	ec 01       	movw	r28, r24
	for(int i=0 ;str[i]!='\0';i++){
  9c:	88 81       	ld	r24, Y
  9e:	88 23       	and	r24, r24
  a0:	31 f0       	breq	.+12     	; 0xae <UART_Send_STR+0x18>
  a2:	21 96       	adiw	r28, 0x01	; 1
	UART_Send_Char(str[i]);}
  a4:	0e 94 47 00 	call	0x8e	; 0x8e <UART_Send_Char>
	while(!(UCSRA &(1<<UDRE)));
	UDR =data;
}
void UART_Send_STR(char* str)
{
	for(int i=0 ;str[i]!='\0';i++){
  a8:	89 91       	ld	r24, Y+
  aa:	81 11       	cpse	r24, r1
  ac:	fb cf       	rjmp	.-10     	; 0xa4 <UART_Send_STR+0xe>
	UART_Send_Char(str[i]);}
}
  ae:	df 91       	pop	r29
  b0:	cf 91       	pop	r28
  b2:	08 95       	ret

000000b4 <UART_Send_NUM>:
void UART_Send_NUM(int num)
{
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
  bc:	2a 97       	sbiw	r28, 0x0a	; 10
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	f8 94       	cli
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
  c8:	4a e0       	ldi	r20, 0x0A	; 10
  ca:	be 01       	movw	r22, r28
  cc:	6f 5f       	subi	r22, 0xFF	; 255
  ce:	7f 4f       	sbci	r23, 0xFF	; 255
  d0:	0e 94 90 00 	call	0x120	; 0x120 <__itoa_ncheck>
	char str[10];
	itoa (num,str,10);
	UART_Send_STR(str);
  d4:	ce 01       	movw	r24, r28
  d6:	01 96       	adiw	r24, 0x01	; 1
  d8:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Send_STR>
}
  dc:	2a 96       	adiw	r28, 0x0a	; 10
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	f8 94       	cli
  e2:	de bf       	out	0x3e, r29	; 62
  e4:	0f be       	out	0x3f, r0	; 63
  e6:	cd bf       	out	0x3d, r28	; 61
  e8:	df 91       	pop	r29
  ea:	cf 91       	pop	r28
  ec:	08 95       	ret

000000ee <UART_Receive>:
char UART_Receive()
{
	while (!(UCSRA & (1<<RXC)));
  ee:	5f 9b       	sbis	0x0b, 7	; 11
  f0:	fe cf       	rjmp	.-4      	; 0xee <UART_Receive>
	return UDR;
  f2:	8c b1       	in	r24, 0x0c	; 12
  f4:	08 95       	ret

000000f6 <main>:
//SLAVE
char UART_Receive();
//VOID
int main(void)
{
	UART_init();
  f6:	0e 94 41 00 	call	0x82	; 0x82 <UART_init>
	
	UART_Send_STR(" WELCOME UART\r ");
  fa:	80 e6       	ldi	r24, 0x60	; 96
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Send_STR>
	UART_Send_NUM(100);
 102:	84 e6       	ldi	r24, 0x64	; 100
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 5a 00 	call	0xb4	; 0xb4 <UART_Send_NUM>
	char x = UART_Receive();
 10a:	0e 94 77 00 	call	0xee	; 0xee <UART_Receive>
 10e:	c8 2f       	mov	r28, r24
	UART_Send_STR("\r");
 110:	80 e7       	ldi	r24, 0x70	; 112
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Send_STR>
	UART_Send_Char(x);
 118:	8c 2f       	mov	r24, r28
 11a:	0e 94 47 00 	call	0x8e	; 0x8e <UART_Send_Char>
 11e:	ff cf       	rjmp	.-2      	; 0x11e <main+0x28>

00000120 <__itoa_ncheck>:
 120:	bb 27       	eor	r27, r27
 122:	4a 30       	cpi	r20, 0x0A	; 10
 124:	31 f4       	brne	.+12     	; 0x132 <__itoa_ncheck+0x12>
 126:	99 23       	and	r25, r25
 128:	22 f4       	brpl	.+8      	; 0x132 <__itoa_ncheck+0x12>
 12a:	bd e2       	ldi	r27, 0x2D	; 45
 12c:	90 95       	com	r25
 12e:	81 95       	neg	r24
 130:	9f 4f       	sbci	r25, 0xFF	; 255
 132:	0c 94 9c 00 	jmp	0x138	; 0x138 <__utoa_common>

00000136 <__utoa_ncheck>:
 136:	bb 27       	eor	r27, r27

00000138 <__utoa_common>:
 138:	fb 01       	movw	r30, r22
 13a:	55 27       	eor	r21, r21
 13c:	aa 27       	eor	r26, r26
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	aa 1f       	adc	r26, r26
 144:	a4 17       	cp	r26, r20
 146:	10 f0       	brcs	.+4      	; 0x14c <__utoa_common+0x14>
 148:	a4 1b       	sub	r26, r20
 14a:	83 95       	inc	r24
 14c:	50 51       	subi	r21, 0x10	; 16
 14e:	b9 f7       	brne	.-18     	; 0x13e <__utoa_common+0x6>
 150:	a0 5d       	subi	r26, 0xD0	; 208
 152:	aa 33       	cpi	r26, 0x3A	; 58
 154:	08 f0       	brcs	.+2      	; 0x158 <__utoa_common+0x20>
 156:	a9 5d       	subi	r26, 0xD9	; 217
 158:	a1 93       	st	Z+, r26
 15a:	00 97       	sbiw	r24, 0x00	; 0
 15c:	79 f7       	brne	.-34     	; 0x13c <__utoa_common+0x4>
 15e:	b1 11       	cpse	r27, r1
 160:	b1 93       	st	Z+, r27
 162:	11 92       	st	Z+, r1
 164:	cb 01       	movw	r24, r22
 166:	0c 94 b5 00 	jmp	0x16a	; 0x16a <strrev>

0000016a <strrev>:
 16a:	dc 01       	movw	r26, r24
 16c:	fc 01       	movw	r30, r24
 16e:	67 2f       	mov	r22, r23
 170:	71 91       	ld	r23, Z+
 172:	77 23       	and	r23, r23
 174:	e1 f7       	brne	.-8      	; 0x16e <strrev+0x4>
 176:	32 97       	sbiw	r30, 0x02	; 2
 178:	04 c0       	rjmp	.+8      	; 0x182 <strrev+0x18>
 17a:	7c 91       	ld	r23, X
 17c:	6d 93       	st	X+, r22
 17e:	70 83       	st	Z, r23
 180:	62 91       	ld	r22, -Z
 182:	ae 17       	cp	r26, r30
 184:	bf 07       	cpc	r27, r31
 186:	c8 f3       	brcs	.-14     	; 0x17a <strrev+0x10>
 188:	08 95       	ret

0000018a <_exit>:
 18a:	f8 94       	cli

0000018c <__stop_program>:
 18c:	ff cf       	rjmp	.-2      	; 0x18c <__stop_program>
